//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace rayshud_Installer.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "15.6.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("https://e3d4daa2995342d1aaca5827b95fce2d:23548ce9177049f5a1601ceafeb8c609@sentry." +
            "io/1190168")]
        public string SentryIO {
            get {
                return ((string)(this["SentryIO"]));
            }
            set {
                this["SentryIO"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("https://raw.githubusercontent.com/raysfire/rayshud/installer/README.md")]
        public string GetLiveVersion {
            get {
                return ((string)(this["GetLiveVersion"]));
            }
            set {
                this["GetLiveVersion"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Unable to find the latest version number.")]
        public string ErrorLiveVersion {
            get {
                return ((string)(this["ErrorLiveVersion"]));
            }
            set {
                this["ErrorLiveVersion"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("TempHUD")]
        public string TempFileName {
            get {
                return ((string)(this["TempFileName"]));
            }
            set {
                this["TempFileName"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Steam\\\\steamapps\\\\common\\\\Team Fortress 2\\\\tf\\\\custom")]
        public string TFDirectory {
            get {
                return ((string)(this["TFDirectory"]));
            }
            set {
                this["TFDirectory"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Please select your tf/custom folder. Example:")]
        public string UserShowDirectory {
            get {
                return ((string)(this["UserShowDirectory"]));
            }
            set {
                this["UserShowDirectory"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("An error occurred while applying installer changes to rayshud")]
        public string ErrorApplyChanges {
            get {
                return ((string)(this["ErrorApplyChanges"]));
            }
            set {
                this["ErrorApplyChanges"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("An error occurred while attempting to download rayshud")]
        public string ErrorInstallMessage {
            get {
                return ((string)(this["ErrorInstallMessage"]));
            }
            set {
                this["ErrorInstallMessage"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Done installing rayshud")]
        public string SuccessInstallMessage {
            get {
                return ((string)(this["SuccessInstallMessage"]));
            }
            set {
                this["SuccessInstallMessage"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Done updating rayshud")]
        public string SuccessUpdateMessage {
            get {
                return ((string)(this["SuccessUpdateMessage"]));
            }
            set {
                this["SuccessUpdateMessage"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Steam\\\\steamapps\\\\common\\\\Team Fortress 2\\\\tf\\\\custom")]
        public string TFDirectoryValidation {
            get {
                return ((string)(this["TFDirectoryValidation"]));
            }
            set {
                this["TFDirectoryValidation"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("rayshud settings saved and applied")]
        public string SuccessApplyChanges {
            get {
                return ((string)(this["SuccessApplyChanges"]));
            }
            set {
                this["SuccessApplyChanges"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("HudPlayerHealth")]
        public string FilePlayerHealth {
            get {
                return ((string)(this["FilePlayerHealth"]));
            }
            set {
                this["FilePlayerHealth"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Done uninstalling rayshud")]
        public string SuccessUninstallMessage {
            get {
                return ((string)(this["SuccessUninstallMessage"]));
            }
            set {
                this["SuccessUninstallMessage"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("rayshud was not found in the tf/custom directory")]
        public string WarningUninstallMessage {
            get {
                return ((string)(this["WarningUninstallMessage"]));
            }
            set {
                this["WarningUninstallMessage"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("An error occurred while attempting to remove rayshud")]
        public string ErrorUninstallMessage {
            get {
                return ((string)(this["ErrorUninstallMessage"]));
            }
            set {
                this["ErrorUninstallMessage"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("tf/custom directory not set! Click the browse button to set it before using the i" +
            "nstaller")]
        public string TFDirectoryNotSet {
            get {
                return ((string)(this["TFDirectoryNotSet"]));
            }
            set {
                this["TFDirectoryNotSet"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Unable to find the tf/custom directory")]
        public string TFDirectoryNotFound {
            get {
                return ((string)(this["TFDirectoryNotFound"]));
            }
            set {
                this["TFDirectoryNotFound"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("An error occurred while verifying rayshud version numbers")]
        public string ErrorTFDirectory {
            get {
                return ((string)(this["ErrorTFDirectory"]));
            }
            set {
                this["ErrorTFDirectory"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("An error occured while loading configuration settings")]
        public string ErrorLoadConfiguration {
            get {
                return ((string)(this["ErrorLoadConfiguration"]));
            }
            set {
                this["ErrorLoadConfiguration"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("installer")]
        public string GitBranch {
            get {
                return ((string)(this["GitBranch"]));
            }
            set {
                this["GitBranch"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("ClassSelection")]
        public string FileClassSelection {
            get {
                return ((string)(this["FileClassSelection"]));
            }
            set {
                this["FileClassSelection"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("TeamMenu")]
        public string FileTeamMenu {
            get {
                return ((string)(this["FileTeamMenu"]));
            }
            set {
                this["FileTeamMenu"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("chapterbackgrounds")]
        public string FileChapterBackgrounds {
            get {
                return ((string)(this["FileChapterBackgrounds"]));
            }
            set {
                this["FileChapterBackgrounds"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("scoreboard")]
        public string FileScoreboard {
            get {
                return ((string)(this["FileScoreboard"]));
            }
            set {
                this["FileScoreboard"] = value;
            }
        }
    }
}
